############################################################
#
# Irrigation Sensors: Template
# https://community.home-assistant.io/t/hass-sprinkler/1903/30?u=richard.huish
# Note, "now()" replaced with "as_timestamp(strptime(states.sensor.date__time.state, '%Y-%m-%d, %H:%M'"
# as now() will noy trigger templated sensor updates.
#
# I think this was based on https://github.com/kloggy/HA-Irrigation-Version1
#
############################################################

############################################################
# Weather Interlock
############################################################
# - platform: template
#   sensors:
#     front_garden_lawn_irrigation_interlock:
#       friendly_name: "Inhibiter"
#       value_template: >
#         {% if (states('sensor.dark_sky_precip_intensity_0d') | multiply(24) | int) > states('input_number.lawns_irrigation_rain_threshold') | int %}
#           Inhibited: Forecasted rain {{states('sensor.dark_sky_precip_intensity_0d') | multiply(24) | int}}mm, threshold is {{states('input_number.lawnsirrigation_rain_threshold') | int}}mm
#         {% elif states('sensor.dark_sky_wind_speed') | int > states('input_number.lawns_irrigation_wind_threshold') | int %}
#           Inhibited: Too windy at {{states('sensor.dark_sky_wind_speed')}}mph, threshold is {{states('input_number.lawns_irrigation_wind_threshold') | int}}mph
#         {% elif states('sensor.dark_sky_overnight_low_temperature_0d') | int < states('input_number.irrigation_temperature_threshold') | int %}
#           Inhibited: Too cold, under {{states('input_number.irrigation_temperature_threshold')}}° at {{states('sensor.dark_sky_overnight_low_temperature_0d')}}°C
#         {% else %}
#           Uninhibited
#         {% endif %}
#       icon_template: >-
#         {% if is_state('sensor.front_garden_lawn_irrigation_interlock', 'Uninhibited') %}
#           mdi:check
#         {% elif 'Too windy' in states('sensor.front_garden_lawn_irrigation_interlock') %}
#           mdi:weather-windy
#         {% elif 'Too cold' in states('sensor.front_garden_lawn_irrigation_interlock') %}
#           mdi:snowflake-alert
#         {% else %}
#           mdi:alert
#         {% endif %}

# - platform: template
#   sensors:
#     front_garden_pots_irrigation_interlock:
#       friendly_name: "Inhibiter"
#       value_template: >
#         {% if states('sensor.dark_sky_overnight_low_temperature_0d') | int < states('input_number.irrigation_temperature_threshold') | int %}
#           Inhibited: Too cold, under {{states('input_number.irrigation_temperature_threshold')}}° at {{states('sensor.dark_sky_overnight_low_temperature_0d')}}°C
#         {% else %}
#           Uninhibited
#         {% endif %}
#       icon_template: >-
#         {% if is_state('sensor.front_garden_pots_irrigation_interlock', 'Uninhibited') %}
#           mdi:check
#         {% elif 'Too windy' in states('sensor.front_garden_pots_irrigation_interlock') %}
#           mdi:weather-windy
#         {% elif 'Too cold' in states('sensor.front_garden_pots_irrigation_interlock') %}
#           mdi:snowflake-alert
#         {% else %}
#           mdi:alert
#         {% endif %}

# - platform: template
#   sensors:
#     back_garden_irrigation_interlock:
#       friendly_name: "Inhibiter"
#       value_template: >
#         {% if states('sensor.dark_sky_overnight_low_temperature_0d') | int < states('input_number.irrigation_temperature_threshold') | int %}
#           Too cold, under {{states('input_number.irrigation_temperature_threshold')}}° at {{states('sensor.dark_sky_overnight_low_temperature_0d')}}°C
#         {% else %}
#           Uninhibited
#         {% endif %}
#       icon_template: >-
#         {% if is_state('sensor.back_garden_irrigation_interlock', 'Uninhibited') %}
#           mdi:check
#         {% elif 'Too windy' in states('sensor.back_garden_irrigation_interlock') %}
#           mdi:weather-windy
#         {% elif 'Too cold' in states('sensor.back_garden_irrigation_interlock') %}
#           mdi:snowflake-alert
#         {% else %}
#           mdi:alert
#         {% endif %}

# - platform: template
#   sensors:
#     back_garden_lawn_irrigation_interlock:
#       friendly_name: "Inhibiter"
#       value_template: >
#         {% if (states('sensor.dark_sky_precip_intensity_0d') | multiply(24) | int) > states('input_number.lawns_irrigation_rain_threshold') | int %}
#           Inhibited: Forecasted rain {{states('sensor.dark_sky_precip_intensity_0d') | multiply(24) | int}}mm, threshold is {{states('input_number.lawns_irrigation_rain_threshold') | int}}mm
#         {% elif states('sensor.dark_sky_wind_speed') | int > states('input_number.lawns_irrigation_wind_threshold') | int %}
#           Inhibited: Too windy at {{states('sensor.dark_sky_wind_speed')}}mph, threshold is {{states('input_number.lawns_irrigation_wind_threshold') | int}}mph
#         {% elif states('sensor.dark_sky_overnight_low_temperature_0d') | int < states('input_number.irrigation_temperature_threshold') | int %}
#           Inhibited: Too cold, under {{states('input_number.irrigation_temperature_threshold')}}° at {{states('sensor.dark_sky_overnight_low_temperature_0d')}}°C
#         {% else %}
#           Uninhibited
#         {% endif %}
#       icon_template: >-
#         {% if is_state('sensor.back_garden_lawn_irrigation_interlock', 'Uninhibited') %}
#           mdi:check
#         {% elif 'Too windy' in states('sensor.back_garden_lawn_irrigation_interlock') %}
#           mdi:weather-windy
#         {% elif 'Too cold' in states('sensor.back_garden_lawn_irrigation_interlock') %}
#           mdi:snowflake-alert
#         {% else %}
#           mdi:alert
#         {% endif %}

- platform: template
  sensors:
    ############################################################
    # Global Settings
    ############################################################
    irrigation_starttime:
      friendly_name: "Forecasted Start Time"
      # With 2 hour positive offset to let the sun get up!
      value_template: "{{(as_timestamp((state_attr('sun.sun','next_rising')))) | timestamp_custom('%H:%M')}}"

    # forecast_rain_accumulated:
    #   friendly_name: "Forecasted Accumulated Rain"
    #   value_template: "{{states('sensor.dark_sky_precip_intensity_0d') | multiply(24) | round(2)}}"
    #   unit_of_measurement: "mm"

    ############################################################
    # Front Garden Plant Pots Settings
    ############################################################
    front_garden_pot_irrigation_duration:
      friendly_name: "Run Duration"
      value_template: "{{states('input_number.front_garden_pot_irrigation_duration') | round(2)}} minutes"

    front_garden_pot_irrigation_last_run:
      friendly_name: "Last Watered"
      value_template: "{{states.switch.front_garden_pot_irrigation_valve.last_changed.strftime('%a %D %-I:%M %p')}}"

    front_garden_pot_irrigation_valve_status:
      friendly_name: "Valve Status"
      value_template: "{% if states.switch.front_garden_pot_irrigation_valve.state == 'on'%}Opened {{((as_timestamp(strptime(states.sensor.date_time.state, '%Y-%m-%d, %H:%M')) - as_timestamp(states.switch.front_garden_pot_irrigation_valve.last_changed)) / 60) | round(2) }} minutes ago{% else %}Closed{% endif %}"

    front_garden_pot_irrigation_schedule:
      friendly_name: "Schedule"
      value_template: "{{ states.input_select.front_garden_pots_irrigation_schedule.state }}"

    # Times by 60 due to the timestamp being in seconds, but the offset is in mins, so convert mins to seconds before adding.
    front_garden_pot_irrigation_starttime:
      friendly_name: "Forecasted Start Time"
      value_template: "{{(as_timestamp(state_attr('sun.sun', 'next_rising')) + ((states('input_number.front_garden_pot_irrigation_sunrise_offset')) | round(2)) * 60) | timestamp_custom('%H:%M') }}"

    front_garden_pot_irrigation_endtime:
      friendly_name: "Forecasted End Time"
      value_template: "{{((as_timestamp(state_attr('sun.sun', 'next_rising')) + ((states('input_number.front_garden_pot_irrigation_sunrise_offset')) | round(2)) * 60) + (states('input_number.front_garden_pot_irrigation_duration') | round(2) * 60)) | timestamp_custom('%H:%M') }}"

    ############################################################
    # Front Garden Lawn Settings
    ############################################################
    front_garden_lawn_irrigation_duration:
      friendly_name: "Run Duration"
      value_template: "{{states.input_number.front_garden_lawn_irrigation_duration.state | round(2)}} minutes}}"

    front_garden_lawn_irrigation_last_run:
      friendly_name: "Last Watered"
      value_template: "{{states.switch.front_garden_lawn_irrigation_valve.last_changed.strftime('%a %D %-I:%M %p')}}"

    front_garden_lawn_irrigation_valve_status:
      friendly_name: "Valve Status"
      value_template: "{% if states.switch.front_garden_lawn_irrigation_valve.state == 'on'%}Opened {{((as_timestamp(strptime(states.sensor.date_time.state, '%Y-%m-%d, %H:%M')) - as_timestamp(states.switch.front_garden_lawn_irrigation_valve.last_changed)) / 60) | round(2) }} minutes ago{% else %}Closed{% endif %}"

    front_garden_lawn_irrigation_schedule:
      friendly_name: "Schedule"
      value_template: "{{ states.input_select.front_garden_lawn_irrigation_schedule.state }}"

    # Times by 60 due to the timestamp being in seconds, but the offset is in mins, so convert mins to seconds before adding.
    front_garden_lawn_irrigation_starttime:
      friendly_name: "Forecasted Start Time"
      value_template: "{{(as_timestamp(state_attr('sun.sun', 'next_rising')) + ((states('input_number.front_garden_lawn_irrigation_sunrise_offset')) | round(2)) * 60) | timestamp_custom('%H:%M') }}"

    front_garden_lawn_irrigation_endtime:
      friendly_name: "Forecasted End Time"
      value_template: "{{((as_timestamp(state_attr('sun.sun', 'next_rising')) + ((states('input_number.front_garden_lawn_irrigation_sunrise_offset')) | round(2)) * 60) + (states('input_number.front_garden_lawn_irrigation_duration') | round(2) * 60)) | timestamp_custom('%H:%M') }}"

    ############################################################
    # Back Garden Settings
    ############################################################
    back_garden_irrigation_duration:
      friendly_name: "Run Duration"
      value_template: "{{states.input_number.back_garden_irrigation_duration.state | round(2)}} minutes"

    back_garden_irrigation_last_run:
      friendly_name: "Last Watered"
      value_template: "{{states.switch.back_garden_irrigation_valve.last_changed.strftime('%a %D %-I:%M %p')}}"

    back_garden_irrigation_valve_status:
      friendly_name: "Valve Status"
      value_template: "{% if states.switch.back_garden_irrigation_valve.state == 'on'%}Opened {{((as_timestamp(strptime(states.sensor.date_time.state, '%Y-%m-%d, %H:%M')) - as_timestamp(states.switch.back_garden_irrigation_valve.last_changed)) / 60) | round(2) }} minutes ago{% else %}Closed{% endif %}"

    back_garden_irrigation_schedule:
      friendly_name: "Schedule"
      value_template: "{{ states.input_select.back_garden_irrigation_schedule.state }}"

    # Times by 60 due to the timestamp being in seconds, but the offset is in mins, so convert mins to seconds before adding.
    back_garden_irrigation_starttime:
      friendly_name: "Forecasted Start Time"
      value_template: "{{(as_timestamp(state_attr('sun.sun', 'next_rising')) + ((states('input_number.back_garden_irrigation_sunrise_offset')) | round(2)) * 60) | timestamp_custom('%H:%M') }}"

    back_garden_irrigation_endtime:
      friendly_name: "Forecasted End Time"
      value_template: "{{((as_timestamp(state_attr('sun.sun', 'next_rising')) + ((states('input_number.back_garden_irrigation_sunrise_offset')) | round(2)) * 60) + (states('input_number.back_garden_irrigation_duration') | round(2) * 60)) | timestamp_custom('%H:%M') }}"

    ############################################################
    # Back Garden Lawn Settings
    ############################################################
    back_garden_lawn_irrigation_duration:
      friendly_name: "Run Duration"
      value_template: "{{states.input_number.back_garden_lawn_irrigation_duration.state | round(2)}} minutes"

    back_garden_lawn_irrigation_last_run:
      friendly_name: "Last Watered"
      value_template: "{{states.switch.back_garden_lawn_1_irrigation_valve.last_changed.strftime('%a %D %-I:%M %p')}}"

    back_garden_lawn_irrigation_valve_status:
      friendly_name: "Valve Status"
      value_template: "{% if states.switch.back_garden_lawn_1_irrigation_valve.state == 'on'%} Valve 1 Opened {{((as_timestamp(strptime(states.sensor.date_time.state, '%Y-%m-%d, %H:%M')) - as_timestamp(states.switch.back_garden_lawn_1_irrigation_valve.last_changed)) / 60) | round(2) }} minutes ago {% else %} {% if states.switch.back_garden_lawn_2_irrigation_valve.state == 'on'%} Valve 2 Opened {{((as_timestamp(strptime(states.sensor.date_time.state, '%Y-%m-%d, %H:%M')) - as_timestamp(states.switch.back_garden_lawn_2_irrigation_valve.last_changed)) / 60) | round(2) }} minutes ago {% else %} Both Closed {% endif %} {% endif %}"

    # back_garden_lawn_irrigation_valve_2_status:
    #   friendly_name: 'Valve Status'
    #   value_template: "{% if states.switch.back_garden_lawn_2_irrigation_valve.state == 'on'%}Opened {{((as_timestamp(strptime(states.sensor.date_time.state, '%Y-%m-%d, %H:%M')) - as_timestamp(states.switch.back_garden_lawn_2_irrigation_valve.last_changed)) / 60) | round(2) }} minutes ago{% else %}Closed{% endif %}"

    back_garden_lawn_irrigation_schedule:
      friendly_name: "Schedule"
      value_template: "{{ states.input_select.back_garden_lawn_irrigation_schedule.state }}"

    # Times by 60 due to the timestamp being in seconds, but the offset is in mins, so convert mins to seconds before adding.
    back_garden_lawn_irrigation_starttime:
      friendly_name: "Forecasted Start Time"
      value_template: "{{(as_timestamp(state_attr('sun.sun', 'next_rising')) + ((states('input_number.back_garden_lawn_irrigation_sunrise_offset')) | round(2)) * 60) | timestamp_custom('%H:%M') }}"

    back_garden_lawn_irrigation_endtime:
      friendly_name: "Forecasted End Time"
      value_template: "{{((as_timestamp(state_attr('sun.sun', 'next_rising')) + ((states('input_number.back_garden_lawn_irrigation_sunrise_offset')) | round(2)) * 60) + (states('input_number.back_garden_lawn_irrigation_duration') | round(2) * 60)) | timestamp_custom('%H:%M') }}"

    ############################################################
    # Front Garden Plant Pots Schedule
    ############################################################
    front_garden_pot_irrigation_next_run:
      friendly_name: "Next Scheduled Run"
      value_template: >
        {# runDay set to 9 = Not Set #}
        {% set runDay = 9 |int %}
        {# Set todays day #}
        {% set currentDay = now().weekday() |int %}
        {%- macro monthu() -%}
            {%- if currentDay == 0 -%}
                {{0}}
            {%- elif  currentDay <= 3 -%}
                {{3}}
            {%- else -%}
                {{0}}
            {%- endif -%}
        {%- endmacro -%}
        {%- macro monwedfrisun() -%}
            {%- if currentDay == 0 -%}
                {{0}}
            {%- elif  currentDay <= 2 -%}
                {{2}}
            {%- elif  currentDay <= 4 -%}
                {{4}}
            {%- elif  currentDay <= 6 -%}
                {{6}}
            {%- endif -%}
        {%- endmacro -%}
        {# set configured runDay from input_select #}
        {% if states.input_select.front_garden_pots_irrigation_schedule.state == "Monday" %}
            {% set runDay = 0 |int %}
        {% elif states.input_select.front_garden_pots_irrigation_schedule.state == "Tuesday" %}
            {% set runDay = 1 |int %}
        {% elif states.input_select.front_garden_pots_irrigation_schedule.state == "Wednesday" %}
            {% set runDay = 2 |int %}
        {% elif states.input_select.front_garden_pots_irrigation_schedule.state == "Thursday" %}
            {% set runDay = 3 |int %}
        {% elif states.input_select.front_garden_pots_irrigation_schedule.state == "Friday" %}
            {% set runDay = 4 |int %}
        {% elif states.input_select.front_garden_pots_irrigation_schedule.state == "Saturday" %}
            {% set runDay = 5 |int %}
        {% elif states.input_select.front_garden_pots_irrigation_schedule.state == "Sunday" %}
            {% set runDay = 6 |int %}
        {% elif states.input_select.front_garden_pots_irrigation_schedule.state == "Mon/Thu" %}
            {% set runDay = monthu() |int -%}
        {% elif states.input_select.front_garden_pots_irrigation_schedule.state == "Mon/Wed/Fri/Sun" %}
            {% set runDay = monwedfrisun() |int %}
        {% elif states.input_select.front_garden_pots_irrigation_schedule.state == "Every Day" %}
            {% set runDay = currentDay |int %}
        {% endif %}
        {# determine the next runday #}
        {% if runDay == 9 %}
            {# schedule not active #}
            {% set runDate = "Not set" %}
        {% else %}
            {# schedule is active so determine next run #}
            {# first check if runDay = today #}
            {% if currentDay == runDay %}
                {# are we passed the scheduled time? #}
                {% if states.sensor.front_garden_pot_irrigation_starttime.state < now().time().strftime("%H:%M") %}
                    {# than we need to fake tomorrow #}
                    {% set currentDay = (currentDay + 1) |int %}
                    {# and calculate new runDay in case we have a list of multiple run days in in a week #}
                    {% if states.input_select.front_garden_pots_irrigation_schedule.state == "Mon/Thu" %}
                        {% set runDay = monthu() |int -%}
                    {% elif states.input_select.front_garden_pots_irrigation_schedule.state == "Mon/Wed/Fri/Sun" %}
                        {% set runDay = monwedfrisun() |int %}
                    {% elif states.input_select.front_garden_pots_irrigation_schedule.state == "Every Day" %}
                        {% set runDay = currentDay |int %}
                    {% endif %}
                {% endif %}
            {% endif %}
            {# Now we can determine next runDate base on now().weekday() and not currentDay as that can be set to fake tomorrow #}
            {% if currentDay <= runDay %}
                {% set Days = runDay - now().weekday() |int %}
            {% else %}
                {% set Days = runDay + 7 - now().weekday() |int %}
            {% endif %}
            {% set runDate = ((as_timestamp(now()) + (86400 * Days)) | timestamp_local) %}
            {# we also want to show the weekday of the next date #}
            {% set weekdayList = ["Mon", "Tue", "Wed", "Thu", "Fri", "Sat", "Sun"] %}
            {% if now().weekday()+ Days < 7 %}
                {% set weekday = weekdayList[(now().weekday()+ Days)] %}
            {% else %}
                {% set weekday = weekdayList[(now().weekday()+ Days)- 7] %}
            {% endif %}
        {% endif %}
        {# all done #}
        {# set states.sensor.front_garden_pot_irrigation_next_run.state = runDate #}
        {% if runDay == 9 %}
            {# schedule not active #}
            {{runDate}}
        {% else %}
            {{weekday}}, {{runDate[8:10]}}-{{runDate[5:7]}}-{{runDate[0:4]}} at {{states.sensor.front_garden_pot_irrigation_starttime.state}}
        {% endif %}

    ############################################################
    # Front Garden Lawn Schedule
    ############################################################
    front_garden_lawn_irrigation_next_run:
      friendly_name: "Next Scheduled Run"
      value_template: >
        {# runDay set to 9 = Not Set #}
        {% set runDay = 9 |int %}
        {# Set todays day #}
        {% set currentDay = now().weekday() |int %}
        {%- macro monthu() -%}
            {%- if currentDay == 0 -%}
                {{0}}
            {%- elif  currentDay <= 3 -%}
                {{3}}
            {%- else -%}
                {{0}}
            {%- endif -%}
        {%- endmacro -%}
        {%- macro monwedfrisun() -%}
            {%- if currentDay == 0 -%}
                {{0}}
            {%- elif  currentDay <= 2 -%}
                {{2}}
            {%- elif  currentDay <= 4 -%}
                {{4}}
            {%- elif  currentDay <= 6 -%}
                {{6}}
            {%- endif -%}
        {%- endmacro -%}
        {# set configured runDay from input_select #}
        {% if states.input_select.front_garden_lawn_irrigation_schedule.state == "Monday" %}
            {% set runDay = 0 |int %}
        {% elif states.input_select.front_garden_lawn_irrigation_schedule.state == "Tuesday" %}
            {% set runDay = 1 |int %}
        {% elif states.input_select.front_garden_lawn_irrigation_schedule.state == "Wednesday" %}
            {% set runDay = 2 |int %}
        {% elif states.input_select.front_garden_lawn_irrigation_schedule.state == "Thursday" %}
            {% set runDay = 3 |int %}
        {% elif states.input_select.front_garden_lawn_irrigation_schedule.state == "Friday" %}
            {% set runDay = 4 |int %}
        {% elif states.input_select.front_garden_lawn_irrigation_schedule.state == "Saturday" %}
            {% set runDay = 5 |int %}
        {% elif states.input_select.front_garden_lawn_irrigation_schedule.state == "Sunday" %}
            {% set runDay = 6 |int %}
        {% elif states.input_select.front_garden_lawn_irrigation_schedule.state == "Mon/Thu" %}
            {% set runDay = monthu() |int -%}
        {% elif states.input_select.front_garden_lawn_irrigation_schedule.state == "Mon/Wed/Fri/Sun" %}
            {% set runDay = monwedfrisun() |int %}
        {% elif states.input_select.front_garden_lawn_irrigation_schedule.state == "Every Day" %}
            {% set runDay = currentDay |int %}
        {% endif %}
        {# determine the next runday #}
        {% if runDay == 9 %}
            {# schedule not active #}
            {% set runDate = "Not set" %}
        {% else %}
            {# schedule is active so determine next run #}
            {# first check if runDay = today #}
            {% if currentDay == runDay %}
                {# are we passed the scheduled time? #}
                {% if states.sensor.front_garden_lawn_irrigation_starttime.state < now().time().strftime("%H:%M") %}
                    {# than we need to fake tomorrow #}
                    {% set currentDay = (currentDay + 1) |int %}
                    {# and calculate new runDay in case we have a list of multiple run days in in a week #}
                    {% if states.input_select.front_garden_lawn_irrigation_schedule.state == "Mon/Thu" %}
                        {% set runDay = monthu() |int -%}
                    {% elif states.input_select.front_garden_lawn_irrigation_schedule.state == "Mon/Wed/Fri/Sun" %}
                        {% set runDay = monwedfrisun() |int %}
                    {% elif states.input_select.front_garden_lawn_irrigation_schedule.state == "Every Day" %}
                        {% set runDay = currentDay |int %}
                    {% endif %}
                {% endif %}
            {% endif %}
            {# Now we can determine next runDate base on now().weekday() and not currentDay as that can be set to fake tomorrow #}
            {% if currentDay <= runDay %}
                {% set Days = runDay - now().weekday() |int %}
            {% else %}
                {% set Days = runDay + 7 - now().weekday() |int %}
            {% endif %}
            {% set runDate = ((as_timestamp(now()) + (86400 * Days)) | timestamp_local) %}
            {# we also want to show the weekday of the next date #}
            {% set weekdayList = ["Mon", "Tue", "Wed", "Thu", "Fri", "Sat", "Sun"] %}
            {% if now().weekday()+ Days < 7 %}
                {% set weekday = weekdayList[(now().weekday()+ Days)] %}
            {% else %}
                {% set weekday = weekdayList[(now().weekday()+ Days)- 7] %}
            {% endif %}
        {% endif %}
        {# all done #}
        {# set states.sensor.front_garden_lawn_irrigation_next_run.state = runDate #}
        {% if runDay == 9 %}
            {# schedule not active #}
            {{runDate}}
        {% else %}
            {{weekday}}, {{runDate[8:10]}}-{{runDate[5:7]}}-{{runDate[0:4]}} at {{states.sensor.front_garden_lawn_irrigation_starttime.state}}
        {% endif %}

    ############################################################
    # Back Garden Schedule
    ############################################################
    back_garden_irrigation_next_run:
      friendly_name: "Next Scheduled Run"
      value_template: >
        {# runDay set to 9 = Not Set #}
        {% set runDay = 9 |int %}
        {# Set todays day #}
        {% set currentDay = now().weekday() |int %}
        {%- macro monthu() -%}
            {%- if currentDay == 0 -%}
                {{0}}
            {%- elif  currentDay <= 3 -%}
                {{3}}
            {%- else -%}
                {{0}}
            {%- endif -%}
        {%- endmacro -%}
        {%- macro monwedfrisun() -%}
            {%- if currentDay == 0 -%}
                {{0}}
            {%- elif  currentDay <= 2 -%}
                {{2}}
            {%- elif  currentDay <= 4 -%}
                {{4}}
            {%- elif  currentDay <= 6 -%}
                {{6}}
            {%- endif -%}
        {%- endmacro -%}
        {# set configured runDay from input_select #}
        {% if states.input_select.back_garden_irrigation_schedule.state == "Monday" %}
            {% set runDay = 0 |int %}
        {% elif states.input_select.back_garden_irrigation_schedule.state == "Tuesday" %}
            {% set runDay = 1 |int %}
        {% elif states.input_select.back_garden_irrigation_schedule.state == "Wednesday" %}
            {% set runDay = 2 |int %}
        {% elif states.input_select.back_garden_irrigation_schedule.state == "Thursday" %}
            {% set runDay = 3 |int %}
        {% elif states.input_select.back_garden_irrigation_schedule.state == "Friday" %}
            {% set runDay = 4 |int %}
        {% elif states.input_select.back_garden_irrigation_schedule.state == "Saturday" %}
            {% set runDay = 5 |int %}
        {% elif states.input_select.back_garden_irrigation_schedule.state == "Sunday" %}
            {% set runDay = 6 |int %}
        {% elif states.input_select.back_garden_irrigation_schedule.state == "Mon/Thu" %}
            {% set runDay = monthu() |int -%}
        {% elif states.input_select.back_garden_irrigation_schedule.state == "Mon/Wed/Fri/Sun" %}
            {% set runDay = monwedfrisun() |int %}
        {% elif states.input_select.back_garden_irrigation_schedule.state == "Every Day" %}
            {% set runDay = currentDay |int %}
        {% endif %}
        {# determine the next runday #}
        {% if runDay == 9 %}
            {# schedule not active #}
            {% set runDate = "Not set" %}
        {% else %}
            {# schedule is active so determine next run #}
            {# first check if runDay = today #}
            {% if currentDay == runDay %}
                {# are we passed the scheduled time? #}
                {% if states.sensor.back_garden_irrigation_starttime.state < now().time().strftime("%H:%M") %}
                    {# than we need to fake tomorrow #}
                    {% set currentDay = (currentDay + 1) |int %}
                    {# and calculate new runDay in case we have a list of multiple run days in in a week #}
                    {% if states.input_select.back_garden_irrigation_schedule.state == "Mon/Thu" %}
                        {% set runDay = monthu() |int -%}
                    {% elif states.input_select.back_garden_irrigation_schedule.state == "Mon/Wed/Fri/Sun" %}
                        {% set runDay = monwedfrisun() |int %}
                    {% elif states.input_select.back_garden_irrigation_schedule.state == "Every Day" %}
                        {% set runDay = currentDay |int %}
                    {% endif %}
                {% endif %}
            {% endif %}
            {# Now we can determine next runDate base on now().weekday() and not currentDay as that can be set to fake tomorrow #}
            {% if currentDay <= runDay %}
                {% set Days = runDay - now().weekday() |int %}
            {% else %}
                {% set Days = runDay + 7 - now().weekday() |int %}
            {% endif %}
            {% set runDate = ((as_timestamp(now()) + (86400 * Days)) | timestamp_local) %}
            {# we also want to show the weekday of the next date #}
            {% set weekdayList = ["Mon", "Tue", "Wed", "Thu", "Fri", "Sat", "Sun"] %}
            {% if now().weekday()+ Days < 7 %}
                {% set weekday = weekdayList[(now().weekday()+ Days)] %}
            {% else %}
                {% set weekday = weekdayList[(now().weekday()+ Days)- 7] %}
            {% endif %}
        {% endif %}
        {# all done #}
        {# set states.sensor.back_garden_irrigation_next_run.state = runDate #}
        {% if runDay == 9 %}
            {# schedule not active #}
            {{runDate}}
        {% else %}
            {{weekday}}, {{runDate[8:10]}}-{{runDate[5:7]}}-{{runDate[0:4]}} at {{states.sensor.back_garden_irrigation_starttime.state}}
        {% endif %}

    ############################################################
    # Back Garden Schedule
    ############################################################
    back_garden_lawn_irrigation_next_run:
      friendly_name: "Next Scheduled Run"
      value_template: >
        {# runDay set to 9 = Not Set #}
        {% set runDay = 9 |int %}
        {# Set todays day #}
        {% set currentDay = now().weekday() |int %}
        {%- macro monthu() -%}
            {%- if currentDay == 0 -%}
                {{0}}
            {%- elif  currentDay <= 3 -%}
                {{3}}
            {%- else -%}
                {{0}}
            {%- endif -%}
        {%- endmacro -%}
        {%- macro monwedfrisun() -%}
            {%- if currentDay == 0 -%}
                {{0}}
            {%- elif  currentDay <= 2 -%}
                {{2}}
            {%- elif  currentDay <= 4 -%}
                {{4}}
            {%- elif  currentDay <= 6 -%}
                {{6}}
            {%- endif -%}
        {%- endmacro -%}
        {# set configured runDay from input_select #}
        {% if states.input_select.back_garden_lawn_irrigation_schedule.state == "Monday" %}
            {% set runDay = 0 |int %}
        {% elif states.input_select.back_garden_lawn_irrigation_schedule.state == "Tuesday" %}
            {% set runDay = 1 |int %}
        {% elif states.input_select.back_garden_lawn_irrigation_schedule.state == "Wednesday" %}
            {% set runDay = 2 |int %}
        {% elif states.input_select.back_garden_lawn_irrigation_schedule.state == "Thursday" %}
            {% set runDay = 3 |int %}
        {% elif states.input_select.back_garden_lawn_irrigation_schedule.state == "Friday" %}
            {% set runDay = 4 |int %}
        {% elif states.input_select.back_garden_lawn_irrigation_schedule.state == "Saturday" %}
            {% set runDay = 5 |int %}
        {% elif states.input_select.back_garden_lawn_irrigation_schedule.state == "Sunday" %}
            {% set runDay = 6 |int %}
        {% elif states.input_select.back_garden_lawn_irrigation_schedule.state == "Mon/Thu" %}
            {% set runDay = monthu() |int -%}
        {% elif states.input_select.back_garden_lawn_irrigation_schedule.state == "Mon/Wed/Fri/Sun" %}
            {% set runDay = monwedfrisun() |int %}
        {% elif states.input_select.back_garden_lawn_irrigation_schedule.state == "Every Day" %}
            {% set runDay = currentDay |int %}
        {% endif %}
        {# determine the next runday #}
        {% if runDay == 9 %}
            {# schedule not active #}
            {% set runDate = "Not set" %}
        {% else %}
            {# schedule is active so determine next run #}
            {# first check if runDay = today #}
            {% if currentDay == runDay %}
                {# are we passed the scheduled time? #}
                {% if states.sensor.back_garden_lawn_irrigation_starttime.state < now().time().strftime("%H:%M") %}
                    {# than we need to fake tomorrow #}
                    {% set currentDay = (currentDay + 1) |int %}
                    {# and calculate new runDay in case we have a list of multiple run days in in a week #}
                    {% if states.input_select.back_garden_lawn_irrigation_schedule.state == "Mon/Thu" %}
                        {% set runDay = monthu() |int -%}
                    {% elif states.input_select.back_garden_lawn_irrigation_schedule.state == "Mon/Wed/Fri/Sun" %}
                        {% set runDay = monwedfrisun() |int %}
                    {% elif states.input_select.back_garden_lawn_irrigation_schedule.state == "Every Day" %}
                        {% set runDay = currentDay |int %}
                    {% endif %}
                {% endif %}
            {% endif %}
            {# Now we can determine next runDate base on now().weekday() and not currentDay as that can be set to fake tomorrow #}
            {% if currentDay <= runDay %}
                {% set Days = runDay - now().weekday() |int %}
            {% else %}
                {% set Days = runDay + 7 - now().weekday() |int %}
            {% endif %}
            {% set runDate = ((as_timestamp(now()) + (86400 * Days)) | timestamp_local) %}
            {# we also want to show the weekday of the next date #}
            {% set weekdayList = ["Mon", "Tue", "Wed", "Thu", "Fri", "Sat", "Sun"] %}
            {% if now().weekday()+ Days < 7 %}
                {% set weekday = weekdayList[(now().weekday()+ Days)] %}
            {% else %}
                {% set weekday = weekdayList[(now().weekday()+ Days)- 7] %}
            {% endif %}
        {% endif %}
        {# all done #}
        {# set states.sensor.back_garden_lawn_irrigation_next_run.state = runDate #}
        {% if runDay == 9 %}
            {# schedule not active #}
            {{runDate}}
        {% else %}
            {{weekday}}, {{runDate[8:10]}}-{{runDate[5:7]}}-{{runDate[0:4]}} at {{states.sensor.back_garden_lawn_irrigation_starttime.state}}
        {% endif %}

    # https://github.com/kloggy/HA-Irrigation-Version2/blob/master/Pre-Requisites.md
    # weather_just_icon:
    #   friendly_name: "mdi Real Weather Icon"
    #   icon_template: >-
    #     {% if is_state("sensor.dark_sky_current_icon","clear-day") %} mdi:weather-sunny
    #     {% elif is_state("sensor.dark_sky_current_icon","clear-night") %} mdi:weather-night
    #     {% elif is_state("sensor.dark_sky_current_icon","rain") %} mdi:weather-rainy
    #     {% elif is_state("sensor.dark_sky_current_icon","snow") %} mdi:weather-snowy
    #     {% elif is_state("sensor.dark_sky_current_icon","fog") %} mdi:weather-fog
    #     {% elif is_state("sensor.dark_sky_current_icon","sleet") %} mdi:weather-partly-snowy-rainy
    #     {% elif is_state("sensor.dark_sky_current_icon","wind") %} mdi:weather-windy
    #     {% elif is_state("sensor.dark_sky_current_icon","cloudy") %} mdi:weather-cloudy
    #     {% elif is_state("sensor.dark_sky_current_icon","partly-cloudy-day") %} mdi:weather-partly-cloudy
    #     {% elif is_state("sensor.dark_sky_current_icon","partly-cloudy-night") %} mdi:weather-night-partly-cloudy
    #     {% elif is_state("sensor.dark_sky_current_icon","hail") %} mdi:weather-hail
    #     {% elif is_state("sensor.dark_sky_current_icon","lightning") %} mdi:weather-lightning
    #     {% elif is_state("sensor.dark_sky_current_icon","thunderstorm") %} mdi:weather-lightning-rainy
    #     {% endif %}
    #   value_template: >-
    #     {% if is_state("sensor.dark_sky_current_icon","clear-day") %} weather-sunny
    #     {% elif is_state("sensor.dark_sky_current_icon","clear-night") %} weather-night
    #     {% elif is_state("sensor.dark_sky_current_icon","rain") %} weather-rainy
    #     {% elif is_state("sensor.dark_sky_current_icon","snow") %} weather-snowy
    #     {% elif is_state("sensor.dark_sky_current_icon","fog") %} weather-fog
    #     {% elif is_state("sensor.dark_sky_current_icon","sleet") %} weather-partly-snowy-rainy
    #     {% elif is_state("sensor.dark_sky_current_icon","wind") %} weather-windy
    #     {% elif is_state("sensor.dark_sky_current_icon","cloudy") %} weather-cloudy
    #     {% elif is_state("sensor.dark_sky_current_icon","partly-cloudy-day") %} weather-partly-cloudy
    #     {% elif is_state("sensor.dark_sky_current_icon","partly-cloudy-night") %} weather-night-partly-cloudy
    #     {% elif is_state("sensor.dark_sky_current_icon","hail") %} weather-hail
    #     {% elif is_state("sensor.dark_sky_current_icon","lightning") %} weather-lightning
    #     {% elif is_state("sensor.dark_sky_current_icon","thunderstorm") %} weather-lightning-rainy
    #     {% endif %}
