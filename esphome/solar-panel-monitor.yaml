##############################################################
# Richard Huish 2024
# https://github.com/genestealer/Home-Assistant-Configuration
# Solar Panel Monitor Sensors
#   ----------
#   The circuit:
#     Adafruit Feather HUZZAH with ESP8266 https://www.adafruit.com/product/2821
#     Adafruit FeatherWing OLED - 128x32 OLED Add-on For Feather https://www.adafruit.com/product/2900
#   Inputs:
#     3 x buttons on Adafruit FeatherWing OLED
#     1 x YHDC Current Transformer SCT-013-000 15A/1V
#     1 x ADS1115 4-Channel 16-Bit A/D Converter
#   Outputs:
#     Adafruit FeatherWing OLED
#     OtherBusyLight indicators on my network
##############################################################
# Config Header for Device
##############################################################
substitutions:
  # Names
  name: solar-panel-monitor
  friendly_name: "Solar Panel Monitor"
  ui_comment: "Solar Panel Monitor" # Only shows in UI.
  
  # Wifi Settings
  ip: 192.168.2.50
  gateway: 192.168.2.1
  subnet: 255.255.255.0

  # Board Settings
  status_led: GPIO16 # NodeMCU on-board LED
  status_led_inverted: "false"
  platform: ESP8266
  board: nodemcuv2
  
  # Debug Component
  log_level: DEBUG 

  # Project 
  project_name: "genestealer.solar-panel-monitor"
  project_version: "1.0.0"
  package_import_url: "github://genestealer/Home-Assistant-Configuration/esphome/solar-panel-monitor.yaml"

##############################################################
# Import shared code
##############################################################

# Packages 
packages:
  device_base: !include device_base.yaml

dashboard_import:
  package_import_url: ${package_import_url}
  import_full_config: false # or true


##############################################################
# Main Code
##############################################################

i2c:
  sda: GPIO4
  scl: GPIO5
  frequency: 400kHz #https://github.com/esphome/issues/issues/4717#issuecomment-1643391691


# ADS1115 4-Channel 16-Bit A/D Converter
ads1115:
  - address: 0x48
    continuous_mode: true # enable for the CT Clamp Current Sensor integration


# Zero amps (Disconnected) = -0.00025 V / -0.00028 V which is saying 0.00308 A


sensor:
  - platform: ads1115
    name: "CT A0-GND"
    id: adc_sensor
    multiplexer: 'A0_GND' # between Pin 0 and GND
    gain: 1.024 # measures up to 1.024V
    update_interval: 60s
    accuracy_decimals: 4


  - platform: ct_clamp
    sensor: adc_sensor
    name: "Measured Current"
    id: ct_clamp_sensor
    accuracy_decimals: 4
    sample_duration: 200ms
    update_interval: 60s
    filters:
          - calibrate_linear:
              # Measured value of 0 Volt to 0A
              - -0.00028 -> 0
              # 1 V --> 15 Amp from CT sensor
              - 1.0 -> 15.0

  - platform: ct_clamp
    sensor: adc_sensor
    name: "Measured Current2"
    id: ct_clamp_sensor2
    accuracy_decimals: 4
    sample_duration: 2000ms
    update_interval: 60s
    filters:
          - calibrate_linear:
              # Measured value of 0 Volt to 0A
              - -0.00028 -> 0
              # 1 V --> 15 Amp from CT sensor
              - 1.0 -> 15.0


  - platform: ct_clamp
    sensor: adc_sensor
    name: "Measured Current3"
    id: ct_clamp_sensor3
    accuracy_decimals: 4
    sample_duration: 200ms
    update_interval: 60s
    filters:
          - calibrate_linear:
              # Measured value of 0 Volt to 0A
              - 0 -> 0
              # 1 V --> 15 Amp from CT sensor
              - 1.0 -> 15.0



  # Read a known voltage from Home Assistant to get a more accurate running position
  - platform: homeassistant
    name: "Known Voltage"
    entity_id: sensor.myups_input_voltage
    id: known_volts
    accuracy_decimals: 2

  # Return Sensor
  - platform: template
    id: my_power1
    name: "Solar Power"
    lambda: return (id(ct_clamp_sensor).state * id(known_volts).state);
    update_interval: 60s
    accuracy_decimals: 3
    unit_of_measurement: 'W'
    state_class: measurement
    device_class: power


  # Return Sensor
  - platform: template
    id: my_power2
    name: "Solar Power2"
    lambda: return (id(ct_clamp_sensor).state * id(known_volts).state);
    update_interval: 60s
    accuracy_decimals: 3
    unit_of_measurement: 'W'
    state_class: measurement
    device_class: power


  # Return Sensor
  - platform: template
    id: my_power3
    name: "Solar Power3"
    lambda: return (id(ct_clamp_sensor).state * id(known_volts).state);
    update_interval: 60s
    accuracy_decimals: 3
    unit_of_measurement: 'W'
    state_class: measurement
    device_class: power

# SSD1306 OLED Display
font:
  - file: "fonts/comic.ttf"
    id: my_font
    size: 20
  - file: "fonts/comic.ttf"
    id: my_fontbismall
    size: 17



        # it.printf(it.get_width(), 0, id(my_fontbismall), TextAlign::TOP_RIGHT, "%s", id(ct_clamp_sensor).state.c_str());
    #    it.printf(it.get_width(), 22, id(my_fontbismall), TextAlign::TOP_RIGHT, "%s", id(bssid).state.c_str());
    # it.image(0, 0, id(my_image));


display:
  - platform: ssd1306_i2c
    model: "SSD1306 128x64"
    # reset_pin: D0
    address: 0x3C
    lambda: |-
      it.printf(0, 0, id(my_font), "%.4f A", id(ct_clamp_sensor).state);
      it.printf(0, 22, id(my_font), "%.4f V", id(adc_sensor).state);
      it.printf(23, 32, id(my_font), "%.4f W", id(my_power1).state);



