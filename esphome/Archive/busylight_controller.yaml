#***************************************************
#   BusyLight Presence Indicator
#     Controller Component
#   Richard Huish 2020
#   I built so my family can know when I'm busy and working in my Home Office.
#   ESP8266 based with local home-assistant.io GUI with controller with physical buttons and mini display
#   See busylight.yaml for Light Component
#   ----------
#   Github: https://github.com/genestealer/Home-Assistant-Configuration/tree/master/esphome
#   ----------
#   GUI: Locally hosted home assistant on network https://www.home-assistant.io/
#   API: Locally hosted native API component https://esphome.io/components/api.html
#   OTA updates: https://esphome.io/components/ota.html
#   ----------
#   The circuit:
#     Adafruit Feather HUZZAH with ESP8266 https://www.adafruit.com/product/2821
#     Adafruit FeatherWing OLED - 128x32 OLED Add-on For Feather https://www.adafruit.com/product/2900
#   Inputs:
#     3 x buttons on Adafruit FeatherWing OLED
#   Outputs:
#     Adafruit FeatherWing OLED
#     OtherBusyLight indicators on my network
#   Home Assistant Automations
#    Buttons on controller trigger automations:
#     E.G. "Busylight Controller Free Button Pressed"
#     Automations run script to set BusyLights, E.G. "I'm Free"
#   See:
#    https://github.com/genestealer/Home-Assistant-Configuration/blob/master/scripts.yaml
#    https://github.com/genestealer/Home-Assistant-Configuration/blob/master/automations.yaml


##############################################################
# Config Header for Device
##############################################################
substitutions:
  # Used by ESP Home
  device_name: busylight-controller
  # Used by ESP Home
  device_description: "Busy Light Controller"
  # Prefix used by Wifi IP, RSSI etc
  upper_devicename: "Busy Light Controller"
  # Prefix used by main Inputs & Outputs
  short_devicename: "Busy Light 1"
  ip: 192.168.2.35
  pass: of4zH*IxKw49yt@H
  status_led: LED_RED
  platform: ESP8266
  board: huzzah

##############################################################
# Shared code from all my projects
##############################################################  
  
esphome:
  name: ${device_name}
  comment: ${device_description}
  platform: ${platform}
  board: ${board}
  
  # on_boot:
  #   priority: -100
  #   then:
  #     - sensor.template.publish:
  #         id: template_state_number
  #         state: "3"
  #     - text_sensor.template.publish:
  #         id: selected_state_text
  #         state: "Away"
wifi:
  ssid: !secret IoT_VLAN_SSID
  password: !secret IoT_VLAN_SSID_Key
  manual_ip:
    static_ip: $ip
    gateway: 192.168.2.1
    subnet: 255.255.255.0


logger: # Enable logging

api: # Enable Home Assistant API
  password: $pass

ota: # Enable over the air updates
  password: $pass
  safe_mode: true
  reboot_timeout: 10min
  num_attempts: 5
# Used by Button C on Adafruit FeatherWing OLED  
# Status LED for connection
# status_led:
#   pin:
#     number: ${status_led}

##############################################################
# Non-Shared Code (May contain shared code)
##############################################################

text_sensor:
# Shared code beginning... 
  # Wifi Data
  - platform: wifi_info  
    ip_address:
      name: ${upper_devicename} IP
      icon: "mdi:ip-network-outline"
    ssid:
      name: ${upper_devicename} SSID
      icon: "mdi:help-network-outline"
    bssid:
      name: ${upper_devicename} BSSID
      icon: "mdi:access-point-network"
# ...shared code end      
      
  # State set via buttons
  - platform: template
    name: "Seleted State Text"
    id: selected_state_text
    update_interval: 10s    
   
  # State confirmed back from Home Assistant
  - platform: homeassistant
    name: "Busy State From Home Assistant"
    entity_id: sensor.seleted_state_text
    id: confirmed_selected_state_text

binary_sensor:
# Shared code beginning... 
  # Device avaliablity
  - platform: status  
    name: ${upper_devicename} Status
    device_class: connectivity
# ...shared code end
    
  - platform: gpio
    pin:
      number: GPIO0
      mode: INPUT_PULLUP
      inverted: True
    name: "Button A"
    on_press:
      then:
        - sensor.template.publish:
            id: template_state_number
            state: "0"
        - text_sensor.template.publish:
            id: selected_state_text
            state: "Free"
  # - platform: gpio
  #   pin:
  #     number: GPIO0
  #     mode: INPUT_PULLUP
  #     inverted: True
  #   name: "Button Away"
  #   on_multi_click:
  #   - timing:
  #       - ON for at most 1s
  #       - OFF for at most 1s
  #       - ON for at most 1s
  #       - OFF for at least 0.2s
  #     then:
  #       - logger.log: "Double Clicked"
  #       - sensor.template.publish:
  #           id: template_state_number
  #           state: "3"
  #       - text_sensor.template.publish:
  #           id: selected_state_text
  #           state: "Away"
  #   - timing:
  #       - ON for 1s to 2s
  #       - OFF for at least 0.5s
  #     then:
  #       - logger.log: "Single Long Clicked"
  #       - sensor.template.publish:
  #           id: template_state_number
  #           state: "3"
  #       - text_sensor.template.publish:
  #           id: selected_state_text
  #           state: "Away"
  #   - timing:
  #       - ON for at most 1s
  #       - OFF for at least 0.5s
  #     then:
  #       - logger.log: "Single Short Clicked"
  #       - sensor.template.publish:
  #           id: template_state_number
  #           state: "0"
  #       - text_sensor.template.publish:
  #           id: selected_state_text
  #           state: "Free"
 
  # - platform: gpio
  #   pin:
  #     number: GPIO0
  #     mode: INPUT_PULLUP
  #     inverted: True
  #   name: "Button Away"
  #   on_multi_click:
  #   - timing:
  #       - ON for at most 1s
  #       - OFF for at most 1s
  #       - ON for at most 1s
  #       - OFF for at least 0.2s
  #     then:
  #       - logger.log: "Double Clicked"
  #       - sensor.template.publish:
  #           id: template_state_number
  #           state: "3"
  #       - text_sensor.template.publish:
  #           id: selected_state_text
  #           state: "Away"
  #   - timing:
  #       - ON for 1s to 2s
  #       - OFF for at least 0.5s
  #     then:
  #       - logger.log: "Single Long Clicked"
  #       - sensor.template.publish:
  #           id: template_state_number
  #           state: "3"
  #       - text_sensor.template.publish:
  #           id: selected_state_text
  #           state: "Away"
  #   - timing:
  #       - ON for at most 1s
  #       - OFF for at least 0.5s
  #     then:
  #       - logger.log: "Single Short Clicked"
  #       - sensor.template.publish:
  #           id: template_state_number
  #           state: "0"
  #       - text_sensor.template.publish:
  #           id: selected_state_text
  #           state: "Free"
            
  - platform: gpio
    pin: 
      number: GPIO16
      mode:
        input: true
        # pullup: true
      inverted: True
    name: "Button B"
    on_press:
      then:
        - sensor.template.publish:
            id: template_state_number
            state: "1"
        - text_sensor.template.publish:
            id: selected_state_text
            state: "Working"

  - platform: gpio
    pin:
      number: GPIO2
      mode: INPUT_PULLUP
      inverted: True
    name: "Button C"
    on_press:
      then:
        - sensor.template.publish:
            id: template_state_number
            state: "2"
        - text_sensor.template.publish:
            id: selected_state_text
            state: "On Call"

sensor:
# Shared code beginning... 
  # Wifi signal strength
  - platform: wifi_signal
    name: ${upper_devicename} RSSI
    update_interval: 300s
    # icon: "mdi:access-point-network"
    device_class: signal_strength
    state_class: measurement
# ...shared code end

  - platform: template
    name: "Busy State Number"
    id: template_state_number

font:
  - file: "fonts/comic.ttf"
    id: my_font
    size: 20
  - file: "fonts/comic.ttf"
    id: my_fontbismall
    size: 17
i2c:
  sda: GPIO4
  scl: GPIO5

display:
  - platform: ssd1306_i2c
    model: "SSD1306 128x64"
    # reset_pin: D0
    address: 0x3C
    lambda: |-
      it.print(0, 0, id(my_font), "Free");
      it.print(0, 20, id(my_font), "Working");
      it.print(0, 40, id(my_font), "On Call");
      it.printf(it.get_width(), 0, id(my_fontbismall), TextAlign::TOP_RIGHT, "%s", id(confirmed_selected_state_text).state.c_str());
  #    it.printf(it.get_width(), 22, id(my_fontbismall), TextAlign::TOP_RIGHT, "%s", id(bssid).state.c_str());
  # it.image(0, 0, id(my_image));
