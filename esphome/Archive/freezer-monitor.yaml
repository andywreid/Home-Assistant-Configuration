#***************************************************
#   Freezer Temperature Monitor with Multiple DS18B20 temperature sensors
#   Richard Huish 2021
#   I built to monitor my chest freezer temperature
#   ----------
#   Github: https://github.com/genestealer/Home-Assistant-Configuration/tree/master/esphome
#   ----------
#   GUI: Locally hosted home assistant on network https://www.home-assistant.io/
#   API: Locally hosted native API component https://esphome.io/components/api.html
#   OTA updates: https://esphome.io/components/ota.html
#   ----------
#   The circuit:
#     Adafruit Feather HUZZAH with ESP8266 https://www.adafruit.com/product/2821
#     Adafruit FeatherWing OLED - 128x32 OLED Add-on For Feather https://www.adafruit.com/product/2900
#   Inputs:
#     3 x buttons on Adafruit FeatherWing OLED
#     2 x DS18B20 temperature sensors
#   Outputs:
#     Adafruit FeatherWing OLED
#     Hoem Assistant
#   Home Assistant Automations
#    Warning, if measured temperature is outside of a determined range
#   See:
#    https://github.com/genestealer/Home-Assistant-Configuration/blob/master/scripts.yaml
#    https://github.com/genestealer/Home-Assistant-Configuration/blob/master/automations.yaml

##############################################################
# Config Header for Device
##############################################################
substitutions:
  # Used by ESP Home
  device_name: freezer-monitor
  # Used by ESP Home
  device_description: "Multiple DS18B20 temperature sensors to monitor freezer"
  # Prefix used by Wifi IP, RSSI etc
  upper_devicename: "Freezer Temperature Monitor"
  # Prefix used by main Inputs & Outputs
  short_devicename: "Freezer Temp Monitor"
  ip: 192.168.2.43
  pass: hxN#^fPPv5ZRy%7l
  status_led: LED_RED
  platform: ESP8266
  board: huzzah
  
##############################################################
# Shared code from all my projects
##############################################################
esphome:
  name: ${device_name}
  comment: ${device_description}
  platform: ${platform}
  board: ${board}
  
wifi:
  ssid: !secret IoT_VLAN_SSID
  password: !secret IoT_VLAN_SSID_Key
  manual_ip:
    static_ip: $ip
    gateway: 192.168.2.1
    subnet: 255.255.255.0

logger: # Enable logging

api: # Enable Home Assistant API
  password: $pass

ota: # Enable over the air updates
  password: $pass
  safe_mode: true
  reboot_timeout: 10min
  num_attempts: 5

# Status LED for connection
status_led:
  pin:
    number: ${status_led}

##############################################################
# Non-Shared Code (May contain shared code)
##############################################################

text_sensor:
# Shared code beginning... 
  # Wifi Data
  - platform: wifi_info  
    ip_address:
      name: ${upper_devicename} IP
      icon: "mdi:ip-network-outline"
    ssid:
      name: ${upper_devicename} SSID
      icon: "mdi:help-network-outline"
    bssid:
      name: ${upper_devicename} BSSID
      icon: "mdi:access-point-network"
# ...shared code end

# https://community.home-assistant.io/t/trying-to-print-tcp-ip-on-oled-but-something-wrong/153712
  - platform: template
    name: "TCP/IP Address"
    lambda: return {WiFi.localIP().toString().c_str()};
    id: tcp_ip_address
    internal: true # Hide from home assistant

binary_sensor:
# Shared code beginning... 
  # Device avaliablity
  - platform: status  
    name: ${upper_devicename} Status
    device_class: connectivity
# ...shared code end



    
# DS18B20 temperature sensor
dallas:
  - pin: GPIO14 #I2C SDA (adafruit-feather-huzzah-esp8266)
  
sensor:
# Shared code beginning... 
  # Wifi signal strength
  - platform: wifi_signal
    name: ${upper_devicename} RSSI
    update_interval: 300s
    # icon: "mdi:access-point-network"
    device_class: signal_strength
    state_class: measurement
    id: wifi_signal_value
# ...shared code end
    
  - platform: dallas
    address: 0xD23C01F095BF2228
    name: "Freezer Temperature Zone 1"
    id: temperature1
    accuracy_decimals: 3
    unit_of_measurement: "°C"
    icon: "mdi:thermometer"
    device_class: "temperature"
    state_class: "measurement"

  - platform: dallas
    address: 0x4B3C01F09541F128
    name: "Freezer Temperature Zone 2"
    id: temperature2
    accuracy_decimals: 3
    unit_of_measurement: "°C"
    icon: "mdi:thermometer"
    device_class: "temperature"
    state_class: "measurement"

  - platform: dallas
    address: 0x333C01F09571DC28
    name: "Freezer Temperature Zone 3"
    id: temperature3
    accuracy_decimals: 3
    unit_of_measurement: "°C"
    icon: "mdi:thermometer"
    device_class: "temperature"
    state_class: "measurement"

  - platform: dallas
    address: 0xE43C01F095DFBB28
    name: "Freezer Temperature Zone 4"
    id: temperature4
    accuracy_decimals: 3
    unit_of_measurement: "°C"
    icon: "mdi:thermometer"
    device_class: "temperature"
    state_class: "measurement"


# # For the font I used five by five licensed under CC BY 4.0 from dafont: https://www.dafont.com/de/fivebyfive.font
# font:
#   - file: "fonts/arial.ttf"
#     id: my_font1
#     size: 20
#   - file: "fonts/arial.ttf"
#     id: my_font2
#     size: 19
#   - file: "fonts/arial.ttf"
#     id: my_font3
#     size: 18
# i2c:
#   sda: GPIO4
#   scl: GPIO5
  
# # https://esphome.io/components/display/index.html?highlight=printf
# # https://www.tutorialspoint.com/c_standard_library/c_function_printf.htm
# display:
#   - platform: ssd1306_i2c
#     model: "SSD1306 128x64"
#     # reset_pin: RST
#     address: 0x3C
#     id: my_display
#     pages:
#       - id: page1
#         lambda: |-
#           it.printf(0, 3, id(my_font1), "T1: %.3f °C", id(temperature1).state);
#           it.printf(0, 33, id(my_font1), "T2: %.3f °C", id(temperature2).state);
         
#       - id: page2
#         lambda: |-
#           it.printf(0, 3, id(my_font2), "Wifi: %.2f", id(wifi_signal_value).state);
#           it.printf(0, 33, id(my_font2), "%s", id(tcp_ip_address).state.c_str());

# # Cycle through pages on a timer
# interval:
#   - interval: 3s
#     then:
#       - display.page.show_next: my_display
#       - component.update: my_display   
