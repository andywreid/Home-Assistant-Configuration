blueprint:
  name: Heating X
  description: Controls one or more thermostats from a calendar, allows temporary
    manual override, and optionally turns off thermostat if a door or window is opened,
    or if the zone is unoccupied for a while.
  domain: automation
  input:
    thermostat_controls:
      name: DEVICE ENTITY - Thermostat control
      description: One or more thermostat entities that are to be controlled by this
        automation
      selector:
        entity:
          domain: climate
          multiple: true
    thermostat_set_temperature_sensors:
      name: DEVICE ENTITY - Thermostat set temperature
      description: The (template) sensors that read the set temperature from the specified
        thermostats
      selector:
        entity:
          domain: sensor
          multiple: true
    door_or_window_open_sensors:
      name: DEVICE ENTITY - Door or window open sensors
      description: Zero or more sensors that detect whether a door or window is open
      selector:
        entity:
          domain: binary_sensor
          device_class: opening
          multiple: true
      default: []
    zone_occupancy_sensors:
      name: DEVICE ENTITY - Zone occupancy sensors
      description: Zero or more sensors that detect whether there is anyone in the
        zone
      selector:
        entity:
          domain: binary_sensor
          device_class: occupancy
          multiple: true
      default: []
    zone_calendar:
      name: CALENDAR ENTITY - Zone calendar
      description: The calendar dedicated to scheduling events for this zone
      selector:
        entity:
          domain: calendar
          multiple: false
    event_name:
      name: HELPER - Event name
      description: The global variable (helper) to hold the name (aka Summary) of
        the current event (if any)
      selector:
        entity:
          domain: input_text
          multiple: false
    event_start:
      name: HELPER - Event start
      description: The global variable (helper) to hold the start date and time of
        the current event (if any)
      selector:
        entity:
          domain: input_datetime
          multiple: false
    event_end:
      name: HELPER - Event end
      description: The global variable (helper) to hold the end date and time of the
        current event (if any)
      selector:
        entity:
          domain: input_datetime
          multiple: false
    event_description:
      name: HELPER - Event description
      description: The global variable (helper) to hold the description of the current
        event (if any)
      selector:
        entity:
          domain: input_text
          multiple: false
    event_temperature:
      name: HELPER - Event temperature
      description: The global variable (helper) to hold the temperature specified
        in the current event (if any)
      selector:
        entity:
          domain: input_number
          multiple: false
    manual_temperature:
      name: HELPER - Manual temperature
      description: The global variable (helper) to hold the temperature specified
        by manual control of the device or the dashboard
      selector:
        entity:
          domain: input_number
          multiple: false
    setting_reason:
      name: HELPER - Setting reason
      description: The global variable (helper) into which the automation writes the
        reason for the current setting (for use on a dashboard)
      selector:
        entity:
          domain: input_text
          multiple: false
    door_or_window_open_timer:
      name: HELPER - Door or window open timer
      description: The global variable (helper) to hold the timer for the period since
        a door or window was opened
      selector:
        entity:
          domain: timer
          multiple: false
    unoccupancy_timer:
      name: HELPER - Unoccupancy timer
      description: The global variable (helper) to hold the timer for the period since
        the zone was last unoccupied
      selector:
        entity:
          domain: timer
          multiple: false
    warmup_timer:
      name: HELPER - Warmup timer
      description: The global variable (helper) to hold the timer for the event warmup
        period
      selector:
        entity:
          domain: timer
          multiple: false
    manual_override_timer:
      name: HELPER - Manual override timer
      description: The global variable (helper) to hold the timer for a manual intervention
      selector:
        entity:
          domain: timer
          multiple: false
    echoblock_timer:
      name: HELPER - Echoblock timer
      description: The timer for use inside the automation to disinguish genuine manual
        changes of the set temperature from those set by the automation
      selector:
        entity:
          domain: timer
          multiple: false
    minimum_thermostat_temperature:
      name: PARAMETER - Minimum thermostat temperature
      description: The minimum temperature that can be set on the thermostat
      selector:
        number:
          min: 0.0
          max: 100.0
          mode: slider
          step: 1.0
      default: 5
    maximum_thermostat_temperature:
      name: PARAMETER - Maximum thermostat temperature
      description: The maximum temperature that can be set on the thermostat
      selector:
        number:
          min: 0.0
          max: 100.0
          mode: slider
          step: 1.0
      default: 95
    frost_setting:
      name: PARAMETER - Frost setting
      description: The temperature to be used when the heating is turned off
      selector:
        number:
          min: 0.0
          max: 100.0
          mode: slider
          step: 1.0
      default: 5
    warmup_period:
      name: PARAMETER - Warmup period
      description: The period of time from the start of a new event for which zone
        unoccupancy will be ignored
      selector:
        time: {}
      default: 02:00:00
    manual_override_period:
      name: PARAMETER - Manual override period
      description: The time period for which a manual intervention will override the
        schedule
      selector:
        time: {}
      default: 02:00:00
    door_or_window_open_period:
      name: PARAMETER - Door or window open period
      description: The time period for which a door or window may be open before the
        heating is turned off
      selector:
        time: {}
      default: 0:03:00
    unoccupancy_period:
      name: PARAMETER - Unoccupancy period
      description: The time period for which the zone may be unoccupied before the
        heating is turned off
      selector:
        time: {}
      default: 01:00:00
  source_url: https://gist.github.com/AndySymons/911ac751480ca62ce2a562e62b59f3ac
mode: queued
variables:
  local_door_or_window_open_sensors: !input door_or_window_open_sensors
  local_event_description: !input event_description
  local_event_name: !input event_name
  local_event_temperature: !input event_temperature
  local_frost_setting: !input frost_setting
  local_manual_temperature: !input manual_temperature
  local_manual_override_timer: !input manual_override_timer
  local_maximum_thermostat_temperature: !input maximum_thermostat_temperature
  local_minimum_thermostat_temperature: !input minimum_thermostat_temperature
  local_thermostat_set_temperature: '{{ trigger.entity_id }}'
  local_zone_calendar: !input zone_calendar
  local_zone_occupancy_sensors: !input zone_occupancy_sensors
trigger:
- platform: state
  entity_id: !input zone_calendar
  to: 'on'
  id: calendar_state_to_on
- platform: state
  entity_id: !input zone_calendar
  from: 'on'
  id: calendar_state_to_off
- platform: state
  entity_id: !input thermostat_set_temperature_sensors
  for:
    seconds: 10
  id: set_temperature_change
- platform: state
  entity_id: !input manual_override_timer
  from: active
  id: manual_override_end
- platform: state
  entity_id: !input zone_occupancy_sensors
  to: 'off'
  for:
    seconds: 10
  id: zone_unoccupied
- platform: state
  entity_id: !input zone_occupancy_sensors
  from: 'off'
  for:
    seconds: 10
  id: zone_occupied
- platform: state
  entity_id: !input door_or_window_open_sensors
  to: 'on'
  for:
    seconds: 10
  id: door_or_window_opened
- platform: state
  entity_id: !input door_or_window_open_sensors
  from: 'on'
  for:
    seconds: 10
  id: doors_and_windows_closed
- platform: state
  entity_id: !input door_or_window_open_timer
  from: active
  id: door_or_window_open_timer_end
- platform: state
  entity_id: !input unoccupancy_timer
  from: active
  id: unoccupancy_timer_end
- platform: time_pattern
  seconds: '02'
action:
- choose:
  - conditions:
    - condition: trigger
      id: set_temperature_change
    - condition: state
      entity_id: !input echoblock_timer
      state: idle
    - condition: template
      value_template: '{{ not states(local_thermostat_set_temperature) == states(local_manual_temperature)
        }}'
    sequence:
    - service: timer.start
      data:
        duration: !input manual_override_period
      target:
        entity_id: !input manual_override_timer
    - service: input_number.set_value
      data:
        value: '{{ states(local_thermostat_set_temperature) }}'
      target:
        entity_id: !input manual_temperature
  - conditions:
    - condition: trigger
      id: manual_override_end
    sequence:
    - service: input_number.set_value
      data:
        value: 0
      target:
        entity_id: !input manual_temperature
  - conditions:
    - condition: trigger
      id: door_or_window_opened
    - condition: not
      conditions:
      - condition: state
        entity_id: !input door_or_window_open_timer
        state: active
    sequence:
    - service: timer.start
      data:
        duration: !input door_or_window_open_period
      target:
        entity_id: !input door_or_window_open_timer
  - conditions:
    - condition: trigger
      id: doors_and_windows_closed
    sequence:
    - service: timer.start
      data:
        duration: !input door_or_window_open_period
      target:
        entity_id: !input door_or_window_open_timer
    - service: timer.pause
      target:
        entity_id: !input door_or_window_open_timer
  - conditions:
    - condition: trigger
      id: zone_unoccupied
    - condition: not
      conditions:
      - condition: state
        entity_id: !input unoccupancy_timer
        state: active
    sequence:
    - service: timer.start
      data:
        duration: !input unoccupancy_period
      target:
        entity_id: !input unoccupancy_timer
  - conditions:
    - condition: trigger
      id: zone_occupied
    sequence:
    - service: timer.start
      data:
        duration: !input unoccupancy_period
      target:
        entity_id: !input unoccupancy_timer
    - service: timer.pause
      target:
        entity_id: !input unoccupancy_timer
- if:
  - condition: template
    value_template: '{{ states(local_zone_calendar) == ''on'' }}

      '
  then:
  - service: input_text.set_value
    data:
      value: '{{ state_attr(local_zone_calendar, ''message'' ) }}'
    target:
      entity_id: !input event_name
  - service: input_datetime.set_datetime
    data:
      datetime: '{{ state_attr(local_zone_calendar, ''start_time'' ) }}'
    target:
      entity_id: !input event_start
  - service: input_datetime.set_datetime
    data:
      datetime: '{{ state_attr(local_zone_calendar, ''end_time'' ) }}'
    target:
      entity_id: !input event_end
  - service: input_text.set_value
    data:
      value: '{{ state_attr(local_zone_calendar, ''description'' ) }}'
    target:
      entity_id: !input event_description
  - service: input_number.set_value
    data:
      value: "{% set description = state_attr(local_zone_calendar, 'description' )
        %} {# copy description field #} {% if not description.split('#') | count >=
        3 %} {% set temperature_error_code = -4 %} {# no number field #} {% elif not
        description.split('#')[1] | is_number %} {% set temperature_error_code = -3
        %} {# not a number #} {% elif not (description.split('#')[1] | float(0)) >=
        local_minimum_thermostat_temperature %} {% set temperature_error_code = -2
        %} {# number too small #} {% elif not (description.split('#')[1] | float(0))
        <= local_maximum_thermostat_temperature %} {% set temperature_error_code =
        -1 %} {# number too big #}\n{% else %} {% set temperature_error_code = 0 %}
        \     {% endif %} {% if temperature_error_code == 0 %}\n  {{ '%0.1f' | format(description.split('#')[1]
        \ | float(0)) }}\n{% else %}\n  {{ local_frost_setting }}            \n{%
        endif %}"
    target:
      entity_id: !input event_temperature
  else:
  - service: input_text.set_value
    data:
      value: (none)
    target:
      entity_id: !input event_name
  - service: input_datetime.set_datetime
    data:
      datetime: '3000-01-01T00:00:00'
    target:
      entity_id: !input event_start
  - service: input_datetime.set_datetime
    data:
      datetime: '3000-01-01T00:00:00'
    target:
      entity_id: !input event_end
  - service: input_text.set_value
    data:
      value: (none)
    target:
      entity_id: !input event_description
  - service: input_number.set_value
    data:
      value: !input frost_setting
    target:
      entity_id: !input event_temperature
- choose:
  - conditions:
    - condition: state
      entity_id: !input door_or_window_open_timer
      state: idle
    - condition: template
      value_template: '{{ local_door_or_window_open_sensors | select (''is_state'',
        ''on'') | list | count > 0 }}'
    sequence:
    - service: climate.set_temperature
      data:
        temperature: !input frost_setting
      target:
        entity_id: !input thermostat_controls
    - service: input_text.set_value
      data:
        value: Turned off because a door or window is open
      target:
        entity_id: !input setting_reason
  - conditions:
    - condition: state
      entity_id: !input unoccupancy_timer
      state: idle
    - condition: template
      value_template: '{{ local_zone_occupancy_sensors | reject (''is_state'', [ ''unknown'',  ''unavailable''
        ] ) | select (''is_state'', ''on'') | list | count > 0 }}'
    sequence:
    - service: climate.set_temperature
      data:
        temperature: !input frost_setting
      target:
        entity_id: !input thermostat_controls
    - service: input_text.set_value
      data:
        value: Turned off because the zone is unoccupied
      target:
        entity_id: !input setting_reason
  - conditions:
    - condition: state
      entity_id: !input manual_override_timer
      state: active
    sequence:
    - service: climate.set_temperature
      data:
        temperature: '{{ states(local_manual_temperature) }}'
      target:
        entity_id: !input thermostat_controls
    - service: input_text.set_value
      data:
        value: Set manually to {{ states(local_manual_temperature) }}. Time left {{
          ( as_timestamp(state_attr(local_manual_override_timer,'finishes_at'))-as_timestamp(now())
          ) |  timestamp_custom('%H:%M', False, 0) }}
      target:
        entity_id: !input setting_reason
  - conditions:
    - condition: state
      entity_id: !input zone_calendar
      state: 'on'
    - condition: template
      value_template: '{{ not states(local_event_description).split(''#'') | count
        >= 3 }}'
    sequence:
    - service: climate.set_temperature
      data:
        temperature: !input frost_setting
      target:
        entity_id: !input thermostat_controls
    - service: input_text.set_value
      data:
        value: '{{ "Turned off because the calendar event ''" + states(local_event_name)
          + "'' does not specify a temperature." }}'
      target:
        entity_id: !input setting_reason
  - conditions:
    - condition: state
      entity_id: !input zone_calendar
      state: 'on'
    - condition: template
      value_template: '{{ not states(local_event_description).split(''#'')[1] | is_number
        }}'
    sequence:
    - service: climate.set_temperature
      data:
        temperature: !input frost_setting
      target:
        entity_id: !input thermostat_controls
    - service: input_text.set_value
      data:
        value: '{{ "Turned off because the calendar event ''" + states(local_event_name)
          + "'' does not specify a valid number for the temperature." }}'
      target:
        entity_id: !input setting_reason
  - conditions:
    - condition: state
      entity_id: !input zone_calendar
      state: 'on'
    - condition: template
      value_template: '{{ not (states(local_event_description).split(''#'')[1] | float(0))
        >= local_minimum_thermostat_temperature }}'
    sequence:
    - service: climate.set_temperature
      data:
        temperature: !input frost_setting
      target:
        entity_id: !input thermostat_controls
    - service: input_text.set_value
      data:
        value: '{{ "Turned off because the calendar event ''" + states(local_event_name)
          + "'' specifies a temperature below the minimum." }}'
      target:
        entity_id: !input setting_reason
  - conditions:
    - condition: state
      entity_id: !input zone_calendar
      state: 'on'
    - condition: template
      value_template: '{{ not (states(local_event_description).split(''#'')[1] | float(0))
        <= local_maximum_thermostat_temperature }}'
    sequence:
    - service: climate.set_temperature
      data:
        temperature: !input frost_setting
      target:
        entity_id: !input thermostat_controls
    - service: input_text.set_value
      data:
        value: '{{ "Turned off because the calendar event ''" + states(local_event_name)
          + "'' specifies a temperature above the maximum." }}'
      target:
        entity_id: !input setting_reason
  - conditions:
    - condition: state
      entity_id: !input zone_calendar
      state: 'on'
    sequence:
    - service: climate.set_temperature
      data:
        temperature: '{{ states(local_event_temperature) }}'
      target:
        entity_id: !input thermostat_controls
    - service: input_text.set_value
      data:
        value: '{{ "Set to " +  states(local_event_temperature) + " by calendar event
          ''" + states(local_event_name) + "'' until " + ( as_timestamp(state_attr(local_zone_calendar,
          ''end_time''))  ) |  timestamp_custom(''%a %d %b %Y at %H:%M'') + "." }}'
      target:
        entity_id: !input setting_reason
  - conditions:
    - condition: state
      entity_id: !input zone_calendar
      state: 'off'
    sequence:
    - service: climate.set_temperature
      data:
        temperature: !input frost_setting
      target:
        entity_id: !input thermostat_controls
    - service: input_text.set_value
      data:
        value: '{{ "Turned off because nothing is scheduled."}}  {% if state_attr(local_zone_calendar,
          ''message'') %} {{ "The next event is ''" + state_attr(local_zone_calendar,
          ''message'') + "'' " + ( as_timestamp(state_attr(local_zone_calendar, ''start_time''))
          )  |  timestamp_custom(''on %a %d %b %Y at %H:%M'', false)}} {% else %}
          {{ "There are no future events." }} {% endif %}'
      target:
        entity_id: !input setting_reason
  - conditions:
    - condition: state
      entity_id: !input zone_calendar
      state: unknown
    sequence:
    - service: climate.set_temperature
      data:
        temperature: !input frost_setting
      target:
        entity_id: !input thermostat_controls
    - service: input_text.set_value
      data:
        value: Turned off because the calendar state is unknown
      target:
        entity_id: !input setting_reason
  - conditions:
    - condition: state
      entity_id: !input zone_calendar
      state: unavailable
    sequence:
    - service: climate.set_temperature
      data:
        temperature: !input frost_setting
      target:
        entity_id: !input thermostat_controls
    - service: input_text.set_value
      data:
        value: Turned off because the calendar is unavailable
      target:
        entity_id: !input setting_reason
  default:
  - service: climate.set_temperature
    data:
      temperature: !input frost_setting
    target:
      entity_id: !input thermostat_controls
  - service: input_text.set_value
    data:
      value: Turned off by default
    target:
      entity_id: !input setting_reason
- service: timer.start
  data:
    duration:
      seconds: 20
  target:
    entity_id: !input echoblock_timer
