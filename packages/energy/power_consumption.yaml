############################################################
# Template Sensor
# power consumption data
#
############################################################

# https://www.home-assistant.io/integrations/template/#state-based-template-sensors
template:
  # - sensor:
  #     - name: "TV Power"
  #       unique_id: "tv_power_calculated"
  #       unit_of_measurement: "W"
  #       state: >
  #         {% if is_state('media_player.living_room_tv', 'on') %}
  #           188
  #         {% else %}
  #           3
  #         {% endif %}
  #       state_class: measurement
  #       device_class: power

  # # Dont use this, as this is apparent power (VA) and not real power (W)!
  # # Use sensor.myups_current_apparent_power
  #   - sensor:
  #       - name: "UPS Power"
  #         unique_id: "ups_watts_calculate"
  #         unit_of_measurement: "W"
  #         # Take UPS Amps and Volts to calculate wattage
  #         state: "{{ (float(states('sensor.myups_output_current'),0) * float(states('sensor.myups_output_voltage'),0)) | int }}"
  #         state_class: measurement
  #         device_class: power

  # - sensor:
  #   - name: "PC and Network Hardware Power"
  #     unique_id: "pc_network_watts_calculated"
  #     unit_of_measurement: "W"
  #     # UPS feeds network equipment, PC and Server.
  #     # Sever has it's own wattage meter, so can calculate the UPS - Sever load.
  #     # Ensure you use real power (W) and not apparent power (VA).
  #     state: "{{ (float(states('sensor.myups_current_real_power'),0) - float(states('sensor.server_real_power'),0)) | int }}"
  #     state_class: measurement
  #     device_class: power

  - sensor:
      - name: "Office Network Power"
        unique_id: "office_network_watts_calculated"
        unit_of_measurement: "W"
        state_class: measurement
        device_class: power
        # UPS feeds network equipment, PC and Server.
        # Sever and PC has it's own wattage meter, so can calculate the UPS - Sever load.
        # Ensure you use real power (W) and not apparent power (VA).
        state: "{{ (float(states('sensor.myups_current_real_power'),0) - float(states('sensor.server_real_power'),0) - float(states('sensor.pc_and_desk_real_power'),0)) | int }}"
        # state: >
        #   {{(
        #       float(states('sensor.myups_current_real_power'),0) -
        #       float(states('sensor.server_real_power'),0) -
        #       float(states('sensor.pc_and_desk_real_power'),0))
        #       | int
        #   }}
        availability: "{{ states('sensor.myups_current_real_power') | is_number and states('sensor.server_real_power') | is_number and states('sensor.pc_and_desk_real_power') | is_number }}"

  # - sensor:
  #     - name: "Calculated House Consumption Power"
  #       unique_id: "solar_plus_grid_house_watts_calculated"
  #       unit_of_measurement: "W"
  #       # House Consumption plus Solar production
  #       # Ensure you use real power (W) and not apparent power (VA).
  #       state: "{{float(states('sensor.solar_panels_current_power_production_watts'),0) + float(states('sensor.doorbell_and_elect_monitor_house_power_consumption'),0) | float}}"
  #       state_class: measurement
  #       device_class: power

# https://www.home-assistant.io/integrations/integration/
# https://community.home-assistant.io/t/powercalc-virtual-power-sensors/318515/3
# https://www.home-assistant.io/integrations/integration/#energy
sensor:
  #Note make sure the source sensor of the integral is of device_class "power" else device_class: energy will be missing from riemann integration sensor.
  # - platform: integration
  #   name: TV Energy
  #   unique_id: tv_energy
  #   source: sensor.tv_power
  #   unit_prefix: k
  #   unit_time: h
  #   round: 2

  - platform: integration
    name: UPS Energy
    unique_id: ups_energy
    source: sensor.myups_current_real_power # Ensure you use real power (W) and not apparent power (VA).
    unit_prefix: k
    unit_time: h
    round: 2

  # - platform: integration
  #   name: PC and Network Energy
  #   unique_id: pc_network_energy
  #   source: sensor.pc_and_network_hardware_power
  #   unit_prefix: k
  #   unit_time: h
  #   round: 2

  # - platform: integration
  #   name: Office Network Energy
  #   unique_id: office_network_energy
  #   source: sensor.office_network_watts_calculated
  #   unit_prefix: k
  #   unit_time: h
  #   round: 2

  # - platform: template
  #   sensors:
  #     true_house_current_consumption:
  #       value_template: "{{states('sensor.unscaled_house_consumption_current') | int / 10}}"
  #       friendly_name: 'House Current Consumption'
  #       unit_of_measurement: 'A'
  #       availability_template: "{% if is_state('binary_sensor.esp_link_status', 'on') %} true {% endif %}"

  # # Using live measured voltage from UPS calculate total wattage
  # - platform: template
  #   sensors:
  #     house_wattage:
  #       value_template: "{{states('sensor.house_current_consumption') | int * (states('sensor.ups_input_voltage') | int / 1000)}}"
  #       friendly_name: 'House Wattage'
  #       unit_of_measurement: 'kW'
  #       availability_template: "{% if is_state('binary_sensor.esp_link_status',  'on' and states('binary_sensor.usp_network_online')) %} true {% endif %}"
